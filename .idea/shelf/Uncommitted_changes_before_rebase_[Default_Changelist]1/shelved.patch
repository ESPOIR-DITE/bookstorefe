Index: api/api.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package api\r\n\r\nimport (\r\n\t\"gopkg.in/resty.v1\"\r\n\t\"studentbookef/config\"\r\n)\r\n\r\n/**\r\n*this is a class that set up the Api address to consume \"http://localhost:9099/sts/\"\r\n* Port: 9099 domain: bookstore\r\n*It also set the type of messaging protocol in our case we will be using JSON\r\n**/\r\n\r\nconst BASE_URL string = \"http://localhost:9099/sts/\"\r\n\r\nfunc Rest() *resty.Request {\r\n\treturn resty.R().SetAuthToken(\"\").\r\n\t\tSetHeader(\"Accept\", \"application/json\").\r\n\t\tSetHeader(\"email\", \"email\").\r\n\t\tSetHeader(\"site\", \"site\").\r\n\t\tSetHeader(\"Content-Type\", \"application/json\")\r\n}\r\n\r\nvar JSON = config.ConfigWithCustomTimeFormat\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- api/api.go	(revision 9d5fbfd22b7a8be3b429e3bb080979a76d9df25f)
+++ api/api.go	(date 1587122307859)
@@ -11,7 +11,7 @@
 *It also set the type of messaging protocol in our case we will be using JSON
 **/
 
-const BASE_URL string = "http://localhost:9099/sts/"
+const BASE_URL string = "http://localhost:9099/sts/" //connection port
 
 func Rest() *resty.Request {
 	return resty.R().SetAuthToken("").
Index: controller/user/usercontroller.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package user\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/go-chi/chi\"\r\n\t\"html/template\"\r\n\t\"net/http\"\r\n\t\"studentbookef/config\"\r\n\t\"studentbookef/domain\"\r\n\t\"studentbookef/io/user\"\r\n\t\"time\"\r\n)\r\n\r\nfunc User(app *config.Env) http.Handler {\r\n\tr := chi.NewRouter()\r\n\tr.Get(\"/\", homeHandler(app))\r\n\tr.Get(\"/login\", logInHandler(app))\r\n\tr.Post(\"/login\", LoginHandler(app))\r\n\tr.Get(\"/signup\", SignUpHandler(app))\r\n\tr.Post(\"/register\", RegisterHandler(app)) //this method receives signUp form\r\n\treturn r\r\n}\r\n\r\ntype Message struct {\r\n\tMessage string\r\n\tClass   string\r\n}\r\n\r\nfunc GetMessage(Type string) Message {\r\n\tswitch Type {\r\n\tcase \"sign_up_error\":\r\n\t\ttext := \"An error has occurred during sign up. You may have already signed up\"\r\n\t\treturn Message{text, \"warning\"}\r\n\tcase \"sign_up_success\":\r\n\t\ttext := \"You have successfully sign up, please verify your email we have sent your an email with your temporary password\"\r\n\t\treturn Message{text, \"info\"}\r\n\tcase \"just_login\":\r\n\t\ttext := \"Welcome back\"\r\n\t\treturn Message{text, \"info\"}\r\n\t}\r\n\treturn Message{}\r\n}\r\n\r\n/****\r\nWhen the user press submit button on sign up form this method will excute.\r\nwe will collect all the data in the form with r.ParseForm() method now we getting each input by passing the input name(html name).\r\nwe then create a user with only email and name other attributs will remain empty until when the user update his profile.\r\nif an error occurs we will redirect the url address to /user/signup. this Url will return a sign up page on user's interface with a proper error Message\r\nBut if there no errors, we will direct the user on home page with a notification Message for him/her to check the email to confirm registration.\r\n*/\r\nfunc LoginHandler(app *config.Env) http.HandlerFunc {\r\n\treturn func(w http.ResponseWriter, r *http.Request) {\r\n\t\tmyuser := domain.UserAccount{}\r\n\t\tr.ParseForm()\r\n\t\tpassword := r.PostFormValue(\"password\")\r\n\t\temail := r.PostFormValue(\"email\")\r\n\t\tif password != \"\" || email != \"\" {\r\n\t\t\tmyuser = domain.UserAccount{email, password, \"\", time.Now()}\r\n\t\t\tresult, err := user.UserLog(myuser)\r\n\t\t\tif err != nil {\r\n\t\t\t\t// If there is no error we save the login details in the cession so that we can authenticate the user during her/his cession period\r\n\t\t\t\tapp.Session.Put(r.Context(), \"userEmail\", result.Email)\r\n\t\t\t\t//app.Session.Put(r.Context(), \"userMessage\",\"just_login\")\r\n\t\t\t\thttp.Redirect(w, r, \"/\", 301)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\nfunc RegisterHandler(app *config.Env) http.HandlerFunc {\r\n\treturn func(w http.ResponseWriter, r *http.Request) {\r\n\t\tmyuser := domain.User{} //creating an empty object\r\n\t\tr.ParseForm()           //Now we grabbing the contents of the form by call the name of the input(html)\r\n\t\tname := r.PostFormValue(\"name\")\r\n\t\temail := r.PostFormValue(\"email\")\r\n\t\tif email != \"\" {\r\n\t\t\tmyuser = domain.User{email, name, \"\", \"\"}\r\n\t\t\t_, err := user.CreateUser(myuser)\r\n\t\t\tif err == nil { //when an error occurs when signing up\r\n\t\t\t\tapp.Session.Put(r.Context(), \"userMessage\", \"sign_up_error\")\r\n\t\t\t\thttp.Redirect(w, r, \"/user/signup\", 301)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tapp.Session.Put(r.Context(), \"userMessage\", \"sign_up_success\")\r\n\t\t\thttp.Redirect(w, r, \"/\", 301)\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc SignUpHandler(app *config.Env) http.HandlerFunc {\r\n\treturn func(w http.ResponseWriter, r *http.Request) {\r\n\t\tType := Message{}\r\n\t\tsessionType := app.Session.GetString(r.Context(), \"userMessage\") // we are checking what could be in the cession.\r\n\t\tapp.Session.Remove(r.Context(), \"userMessage\")\r\n\t\tif sessionType != \"\" { //if there is something in the cession we need to check what it is\r\n\t\t\tType = GetMessage(sessionType)\r\n\t\t}\r\n\t\tfiles := []string{\r\n\t\t\tapp.Path + \"user/sign_up.html\",\r\n\t\t\tapp.Path + \"template/navigator.html\",\r\n\t\t\tapp.Path + \"template/footer.html\",\r\n\t\t}\r\n\t\tts, err := template.ParseFiles(files...)\r\n\t\tif err != nil {\r\n\t\t\tapp.ErrorLog.Println(err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\terr = ts.Execute(w, Type)\r\n\t\tif err != nil {\r\n\t\t\tapp.ErrorLog.Println(err.Error())\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc logInHandler(app *config.Env) http.HandlerFunc {\r\n\treturn func(w http.ResponseWriter, r *http.Request) {\r\n\t\tfmt.Println(\"voila we are in\")\r\n\t\tfiles := []string{\r\n\t\t\tapp.Path + \"user/loginpage.html\",\r\n\t\t\tapp.Path + \"template/navigator.html\",\r\n\t\t\tapp.Path + \"template/footer.html\",\r\n\t\t}\r\n\t\tts, err := template.ParseFiles(files...)\r\n\t\tif err != nil {\r\n\t\t\tapp.ErrorLog.Println(err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\terr = ts.Execute(w, nil)\r\n\t\tif err != nil {\r\n\t\t\tapp.ErrorLog.Println(err.Error())\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc homeHandler(app *config.Env) http.HandlerFunc {\r\n\treturn func(w http.ResponseWriter, r *http.Request) {\r\n\t\tfiles := []string{\r\n\t\t\tapp.Path + \"user/loginpage.html\",\r\n\t\t\tapp.Path + \"template/navigator.html\",\r\n\t\t\tapp.Path + \"template/footer.html\",\r\n\t\t}\r\n\t\tts, err := template.ParseFiles(files...)\r\n\t\tif err != nil {\r\n\t\t\tapp.ErrorLog.Println(err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\terr = ts.Execute(w, nil)\r\n\t\tif err != nil {\r\n\t\t\tapp.ErrorLog.Println(err.Error())\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- controller/user/usercontroller.go	(revision 9d5fbfd22b7a8be3b429e3bb080979a76d9df25f)
+++ controller/user/usercontroller.go	(date 1587123701795)
@@ -42,10 +42,11 @@
 }
 
 /****
-When the user press submit button on sign up form this method will excute.
+When the user press submit button on sign up form this method will execute.
 we will collect all the data in the form with r.ParseForm() method now we getting each input by passing the input name(html name).
-we then create a user with only email and name other attributs will remain empty until when the user update his profile.
-if an error occurs we will redirect the url address to /user/signup. this Url will return a sign up page on user's interface with a proper error Message
+we then create a user with only email and name other attributes will remain empty until when the user update his profile.
+if an error occurs we will redirect the url address to /user/signup.
+this Url will return a sign up page on user's interface with a proper error Message
 But if there no errors, we will direct the user on home page with a notification Message for him/her to check the email to confirm registration.
 */
 func LoginHandler(app *config.Env) http.HandlerFunc {
Index: go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>github.com/alexedwards/scs v1.4.1 h1:/5L5a07IlqApODcEfZyMsu8Smd1S7Q4nBjEyKxIRTp0=\r\ngithub.com/alexedwards/scs v1.4.1/go.mod h1:JRIFiXthhMSivuGbxpzUa0/hT5rz2hpyw61Bmd+S1bg=\r\ngithub.com/alexedwards/scs/v2 v2.2.0 h1:C0iQ8WHgzEe0zck4whkzvCXnLMP/rw2AM6BdQYNa4/c=\r\ngithub.com/alexedwards/scs/v2 v2.2.0/go.mod h1:ToaROZxyKukJKT/xLcVQAChi5k6+Pn1Gvmdl7h3RRj8=\r\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\r\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/go-chi/chi v4.1.0+incompatible h1:ETj3cggsVIY2Xao5ExCu6YhEh5MD6JTfcBzS37R260w=\r\ngithub.com/go-chi/chi v4.1.0+incompatible/go.mod h1:eB3wogJHnLi3x/kFX2A+IbTBlXxmMeXJVKy9tTv1XzQ=\r\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\r\ngithub.com/json-iterator/go v1.1.9 h1:9yzud/Ht36ygwatGx56VwCZtlI/2AD15T1X2sjSuGns=\r\ngithub.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\r\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 h1:ZqeYNhU3OHLH3mGKHDcjJRFFRrJa6eAM5H+CtDdOsPc=\r\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\r\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\r\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\r\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742 h1:Esafd1046DLDQ0W1YjYsBW+p8U2u7vzgW2SQVmlNazg=\r\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\r\ngithub.com/modern-go/reflect2 v1.0.1 h1:9f412s+6RmYXLWZSEzVVgPGK7C2PphHj5RJrvfx9AWI=\r\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\r\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\r\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\r\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\r\ngithub.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=\r\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\r\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\r\ngolang.org/x/crypto v0.0.0-20200406173513-056763e48d71 h1:DOmugCavvUtnUD114C1Wh+UgTgQZ4pMLzXxi1pSt+/Y=\r\ngolang.org/x/crypto v0.0.0-20200406173513-056763e48d71/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\r\ngolang.org/x/net v0.0.0-20181220203305-927f97764cc3 h1:eH6Eip3UpmR+yM/qI9Ijluzb1bNv/cAU/n+6l8tRSis=\r\ngolang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\r\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3 h1:0GoQqolDA55aaLxZyTzK/Y2ePZzZTUrRacwib7cNsYQ=\r\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\r\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\r\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d h1:+R4KGOnez64A81RvjARKc4UT5/tI9ujCIVX+P5KiHuI=\r\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\r\ngolang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=\r\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\r\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\r\ngopkg.in/resty.v1 v1.12.0 h1:CuXP0Pjfw9rOuY6EP+UvtNvt5DSqHpIxILZKT/quCZI=\r\ngopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- go.sum	(revision 9d5fbfd22b7a8be3b429e3bb080979a76d9df25f)
+++ go.sum	(date 1587122307868)
@@ -1,5 +1,3 @@
-github.com/alexedwards/scs v1.4.1 h1:/5L5a07IlqApODcEfZyMsu8Smd1S7Q4nBjEyKxIRTp0=
-github.com/alexedwards/scs v1.4.1/go.mod h1:JRIFiXthhMSivuGbxpzUa0/hT5rz2hpyw61Bmd+S1bg=
 github.com/alexedwards/scs/v2 v2.2.0 h1:C0iQ8WHgzEe0zck4whkzvCXnLMP/rw2AM6BdQYNa4/c=
 github.com/alexedwards/scs/v2 v2.2.0/go.mod h1:ToaROZxyKukJKT/xLcVQAChi5k6+Pn1Gvmdl7h3RRj8=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
@@ -24,15 +22,11 @@
 github.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
-golang.org/x/crypto v0.0.0-20200406173513-056763e48d71 h1:DOmugCavvUtnUD114C1Wh+UgTgQZ4pMLzXxi1pSt+/Y=
-golang.org/x/crypto v0.0.0-20200406173513-056763e48d71/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/net v0.0.0-20181220203305-927f97764cc3 h1:eH6Eip3UpmR+yM/qI9Ijluzb1bNv/cAU/n+6l8tRSis=
 golang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3 h1:0GoQqolDA55aaLxZyTzK/Y2ePZzZTUrRacwib7cNsYQ=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190412213103-97732733099d h1:+R4KGOnez64A81RvjARKc4UT5/tI9ujCIVX+P5KiHuI=
-golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=
 golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
Index: go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module studentbookef\r\n\r\ngo 1.13\r\n\r\nrequire (\r\n\t//github.com/alexedwards/scs v1.4.1\r\n\tgithub.com/alexedwards/scs/v2 v2.2.0\r\n\tgithub.com/go-chi/chi v4.1.0+incompatible\r\n\tgithub.com/json-iterator/go v1.1.9\r\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\r\n\tgithub.com/modern-go/reflect2 v1.0.1 // indirect\r\n\tgithub.com/stretchr/testify v1.3.0\r\n\tgolang.org/x/crypto v0.0.0-20200406173513-056763e48d71 // indirect\r\n\tgolang.org/x/text v0.3.2 // indirect\r\n\tgopkg.in/resty.v1 v1.12.0\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- go.mod	(revision 9d5fbfd22b7a8be3b429e3bb080979a76d9df25f)
+++ go.mod	(date 1587122307863)
@@ -10,7 +10,7 @@
 	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
 	github.com/modern-go/reflect2 v1.0.1 // indirect
 	github.com/stretchr/testify v1.3.0
-	golang.org/x/crypto v0.0.0-20200406173513-056763e48d71 // indirect
+	golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3 // indirect
 	golang.org/x/text v0.3.2 // indirect
 	gopkg.in/resty.v1 v1.12.0
 )
